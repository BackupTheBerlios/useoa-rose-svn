
PROCEDURE = { < ProcHandle("::Foo::Foo"), SymHandle("method:::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo::Foo(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("::Foo::someMethod"), SymHandle("method:::Foo::someMethod__L0R") > }
    FORMALS = {
        [
            < 0, SymHandle("x") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline static void Foo::someMethod(int *x){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("method:::Foo::someMethod__L0R"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("class ::Foo {public: inline Foo::Foo(){}inline static void Foo::someMethod(int *x){}};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int main(){int x;Foo::someMethod(&x);return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{int x;Foo::someMethod(&x);return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int x;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("Foo::someMethod(&x);") =>
        [
            MemRefHandle("Foo::someMethod") => 
                NamedRef( USE, SymHandle("method:::Foo::someMethod__L0R"))
            MemRefHandle("&x") => 
                AddressOf( USE, NamedRef( USE, SymHandle("x")))
        ] }
    CALLSITES = { StmtHandle("Foo::someMethod(&x);") =>
        [
            CallHandle("Foo::someMethod(&x)") => 
                NamedRef( USE, SymHandle("method:::Foo::someMethod__L0R"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("Foo::someMethod(&x)") =>
        [
            < 0, AddressOf( USE, NamedRef( USE, SymHandle("x"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("return 0;") =>
        [
        ] }
    LOCATION = { < SymHandle("main"), not local > }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("method:::Foo::someMethod__L0R"), not local > }
