
PROCEDURE = { < ProcHandle("::Foo::Foo"), SymHandle("method:::Foo::Foo__L0R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::Foo::Foo__L0R") >
            < 1, SymHandle("x") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("x") => 
                AddressOf( USE, NamedRef( USE, SymHandle("x")))
            MemRefHandle("assign_or_agg_initializer:x") => 
                NamedRef( USE, SymHandle("this::::Foo::Foo__L0R"))
            MemRefHandle("mX&") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::Foo::Foo__L0R")), 1), mX)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::Foo::Foo__L0R")), 1), mX)
            , AddressOf( USE, NamedRef( USE, SymHandle("x"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo::Foo(int x) : mX(x){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::::Foo::Foo__L0R"), local > }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("method:::Foo::Foo__L0R"), not local > }

PROCEDURE = { < ProcHandle("::Foo::Foo"), SymHandle("method:::Foo::Foo__L1R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::Foo::Foo__L1R") >
            < 1, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("refRelatedBaseOrTmp") => 
                NamedRef( USE, SymHandle("f"))
            MemRefHandle("assign_or_agg_initializer:(f.Foo::mX)") => 
                NamedRef( USE, SymHandle("this::::Foo::Foo__L1R"))
            MemRefHandle("(f.Foo::mX)") => 
                FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mX)
            MemRefHandle("mX&") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::Foo::Foo__L1R")), 1), mX)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::Foo::Foo__L1R")), 1), mX)
            , FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mX) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo::Foo(class Foo &f) : mX((f.mX)){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::::Foo::Foo__L1R"), local > }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("method:::Foo::Foo__L1R"), not local > }

PROCEDURE = { < ProcHandle("::Foo::operator="), SymHandle("method:::Foo::operator=__L2R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::Foo::operator=__L2R") >
            < 1, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo &Foo::operator=(class Foo &f){return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return *(this);") =>
        [
            MemRefHandle("(this)") => 
                NamedRef( USE, SymHandle("this::::Foo::operator=__L2R"))
            MemRefHandle("*(this)") => 
                NamedRef( USE, SymHandle("this::::Foo::operator=__L2R"))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("return *(this);") =>
        [
            < NamedRef( DEF, SymHandle("method:::Foo::operator=__L2R"))
            , NamedRef( USE, SymHandle("this::::Foo::operator=__L2R")) >
        ] }
    LOCATION = { < SymHandle("this::::Foo::operator=__L2R"), local > }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("method:::Foo::operator=__L2R"), not local > }

PROCEDURE = { < ProcHandle("::Foo::~Foo"), SymHandle("method:::Foo::~Foo__L3R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::Foo::~Foo__L3R") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo::~Foo(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::::Foo::~Foo__L3R"), local > }
    LOCATION = { < SymHandle("method:::Foo::~Foo__L3R"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("class ::Foo {public: inline Foo::Foo(int x) : mX(x){}inline Foo::Foo(class Foo &f) : mX((f.mX)){}inline Foo &Foo::operator=(class Foo &f){return *(this);}inline Foo::~Foo(){}int &mX;class ::Foo *mFooPtr;};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int main(){int x;class ::Foo *f = new ::Foo(x);f -> ::Foo::mFooPtr =(new ::Foo(x));(( *(f -> ::Foo::mFooPtr)).::Foo::mX) = x;class ::Foo obj(x);(obj.::Foo::mX) = x;return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{int x;class ::Foo *f = new ::Foo(x);f -> ::Foo::mFooPtr =(new ::Foo(x));(( *(f -> ::Foo::mFooPtr)).::Foo::mX) = x;class ::Foo obj(x);(obj.::Foo::mX) = x;return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int x;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("class Foo *f = new Foo(x);") =>
        [
            MemRefHandle("::Foo(x)") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L0R"))
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"))
            MemRefHandle("implicit actual this:x") => 
                AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("new Foo(x)"), 0)))
            MemRefHandle("new Foo(x)") => 
                AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("new Foo(x)"), 0)))
            MemRefHandle("f") => 
                NamedRef( DEF, SymHandle("f"))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("class Foo *f = new Foo(x);") =>
        [
            < NamedRef( DEF, SymHandle("f"))
            , AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("new Foo(x)"), 0))) >
        ] }
    CALLSITES = { StmtHandle("class Foo *f = new Foo(x);") =>
        [
            CallHandle("new Foo(x)") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L0R"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("new Foo(x)") =>
        [
            < 0, AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("new Foo(x)"), 0))) >
        ] }
    MEMREFEXPRS = { StmtHandle("f -> Foo::mFooPtr =(new Foo(x));") =>
        [
            MemRefHandle("::Foo(x)") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L0R"))
            MemRefHandle("f") => 
                NamedRef( USE, SymHandle("f"))
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"))
            MemRefHandle("implicit actual this:x") => 
                AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("(new Foo(x))"), 0)))
            MemRefHandle("(new Foo(x))") => 
                AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("(new Foo(x))"), 0)))
            MemRefHandle("f -> Foo::mFooPtr") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mFooPtr)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("f -> Foo::mFooPtr =(new Foo(x));") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mFooPtr)
            , AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("(new Foo(x))"), 0))) >
        ] }
    CALLSITES = { StmtHandle("f -> Foo::mFooPtr =(new Foo(x));") =>
        [
            CallHandle("(new Foo(x))") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L0R"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("(new Foo(x))") =>
        [
            < 0, AddressOf( USE, SubSetRef( USE, UnnamedRef( USE, ExprHandle("(new Foo(x))"), 0))) >
        ] }
    MEMREFEXPRS = { StmtHandle("(( *(f -> Foo::mFooPtr)).Foo::mX) = x;") =>
        [
            MemRefHandle("refRelatedBaseOrTmp") => 
                SubSetRef( USE, FieldAccess( USE, SubSetRef( USE, Deref( USE, FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mFooPtr), 1)), mX))
            MemRefHandle("f") => 
                NamedRef( USE, SymHandle("f"))
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"))
            MemRefHandle("(( *(f -> Foo::mFooPtr)).Foo::mX)") => 
                SubSetRef( DEF, Deref( USE, SubSetRef( USE, FieldAccess( USE, SubSetRef( USE, Deref( USE, FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mFooPtr), 1)), mX)), 1))
            MemRefHandle("(f -> Foo::mFooPtr)") => 
                FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f")), 1), mFooPtr)
        ] }
    MEMREFEXPRS = { StmtHandle("class Foo obj(x);") =>
        [
            MemRefHandle("::Foo(x)") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L0R"))
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"))
            MemRefHandle("implicit actual this:x") => 
                AddressOf( USE, NamedRef( USE, SymHandle("obj")))
        ] }
    CALLSITES = { StmtHandle("class Foo obj(x);") =>
        [
            CallHandle("obj") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L0R"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("obj") =>
        [
            < 0, AddressOf( USE, NamedRef( USE, SymHandle("obj"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("(obj.Foo::mX) = x;") =>
        [
            MemRefHandle("refRelatedBaseOrTmp") => 
                FieldAccess( USE, NamedRef( USE, SymHandle("obj")), mX)
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"))
            MemRefHandle("(obj.Foo::mX)") => 
                Deref( DEF, FieldAccess( USE, NamedRef( USE, SymHandle("obj")), mX), 1)
        ] }
    MEMREFEXPRS = { StmtHandle("return 0;") =>
        [
        ] }
    LOCATION = { < SymHandle("main"), not local > }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("obj"), local > }
    LOCATION = { < SymHandle("method:::Foo::Foo__L0R"), not local > }
