
PROCEDURE = { < ProcHandle("::foo::foo"), SymHandle("method:::foo::foo__L0R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::foo::foo__L0R") >
            < 1, SymHandle("x") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("x") => 
                AddressOf( USE, NamedRef( USE, SymHandle("x")))
            MemRefHandle("assign_or_agg_initializer:x") => 
                NamedRef( USE, SymHandle("this::::foo::foo__L0R"))
            MemRefHandle("assign_or_agg_initializer:((this) -> foo::someRef)") => 
                NamedRef( USE, SymHandle("this::::foo::foo__L0R"))
            MemRefHandle("assign_or_agg_initializer:5") => 
                NamedRef( USE, SymHandle("this::::foo::foo__L0R"))
            MemRefHandle("(this)") => 
                NamedRef( USE, SymHandle("this::::foo::foo__L0R"))
            MemRefHandle("((this) -> foo::someRef)") => 
                FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), someRef)
            MemRefHandle("someRef&") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), someRef)
            MemRefHandle("someOtherRef&") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), someOtherRef)
            MemRefHandle("constRef&") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), constRef)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), someOtherRef)
            , FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), someRef) >
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::foo::foo__L0R")), 1), someRef)
            , AddressOf( USE, NamedRef( USE, SymHandle("x"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline foo::foo(int x) : someRef(x), someOtherRef(((this) -> someRef)), constRef(5){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::::foo::foo__L0R"), local > }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("method:::foo::foo__L0R"), not local > }

PROCEDURE = { < ProcHandle("::foo::~foo"), SymHandle("method:::foo::~foo__L1R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::foo::~foo__L1R") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline foo::~foo(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::::foo::~foo__L1R"), local > }
    LOCATION = { < SymHandle("method:::foo::~foo__L1R"), not local > }

PROCEDURE = { < ProcHandle("::foo::operator="), SymHandle("method:::foo::operator=__L2R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::foo::operator=__L2R") >
            < 1, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline foo &foo::operator=(class foo &f){return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return *(this);") =>
        [
            MemRefHandle("(this)") => 
                NamedRef( USE, SymHandle("this::::foo::operator=__L2R"))
            MemRefHandle("*(this)") => 
                NamedRef( USE, SymHandle("this::::foo::operator=__L2R"))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("return *(this);") =>
        [
            < NamedRef( DEF, SymHandle("method:::foo::operator=__L2R"))
            , NamedRef( USE, SymHandle("this::::foo::operator=__L2R")) >
        ] }
    LOCATION = { < SymHandle("this::::foo::operator=__L2R"), local > }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("method:::foo::operator=__L2R"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("class ::foo {public: inline foo::foo(int x) : someRef(x), someOtherRef(((this) -> someRef)), constRef(5){}inline foo::~foo(){}inline foo &foo::operator=(class foo &f){return *(this);}private: int &someRef;int &someOtherRef;const int &constRef;};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int main(){return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return 0;") =>
        [
        ] }
    LOCATION = { < SymHandle("main"), not local > }
