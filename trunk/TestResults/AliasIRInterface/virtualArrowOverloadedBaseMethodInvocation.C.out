
PROCEDURE = { < ProcHandle("Base::Base"), SymHandle("method:Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Base(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("Base::Base"), SymHandle("method:Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb___Rb__Base__Re___Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb___Rb__Base__Re___Fe_") >
            < 1, SymHandle("b") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Base(class Base &b){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("b"), local > }
    LOCATION = { < SymHandle("this::Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb___Rb__Base__Re___Fe_"), local > }
    LOCATION = { < SymHandle("method:Base::Base__Base__scope__Base____MFb_Base__Fb_v_Gb___Rb__Base__Re___Fe_"), not local > }

PROCEDURE = { < ProcHandle("Base::~Base"), SymHandle("method:Base::~Base__Base__scope____dtBase____MFb_Base__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Base::~Base__Base__scope____dtBase____MFb_Base__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline ~Base(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::Base::~Base__Base__scope____dtBase____MFb_Base__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:Base::~Base__Base__scope____dtBase____MFb_Base__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("Base::operator="), SymHandle("method:Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_") >
            < 1, SymHandle("b") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Base &operator=(class Base &b){return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return *(this);") =>
        [
            MemRefHandle("(this)") => 
                NamedRef( USE, SymHandle("this::Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_"), F, full)
            MemRefHandle("*(this)") => 
                NamedRef( USE, SymHandle("this::Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_"), F, full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("return *(this);") =>
        [
            < NamedRef( DEF, SymHandle("method:Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_"), F, full)
            , NamedRef( USE, SymHandle("this::Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_"), F, full) >
        ] }
    LOCATION = { < SymHandle("b"), local > }
    LOCATION = { < SymHandle("this::Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_"), local > }
    LOCATION = { < SymHandle("method:Base::operator=__Base__scope__operator__as____MFb_Base__Fb___Rb__Base__Re___Gb___Rb__Base__Re___Fe_"), not local > }

PROCEDURE = { < ProcHandle("Base::virtMethodBase"), SymHandle("method:Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: virtual inline void virtMethodBase(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("Base::virtMethod2"), SymHandle("method:Base::virtMethod2__Base__scope__virtMethod2____MFb_Base__Fb_v_Gb_i_Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Base::virtMethod2__Base__scope__virtMethod2____MFb_Base__Fb_v_Gb_i_Fe_") >
            < 1, SymHandle("x") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: virtual inline void virtMethod2(int x){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("this::Base::virtMethod2__Base__scope__virtMethod2____MFb_Base__Fb_v_Gb_i_Fe_"), local > }
    LOCATION = { < SymHandle("method:Base::virtMethod2__Base__scope__virtMethod2____MFb_Base__Fb_v_Gb_i_Fe_"), not local > }

PROCEDURE = { < ProcHandle("Foo::Foo"), SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("Foo::Foo"), SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb___Rb__Foo__Re___Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb___Rb__Foo__Re___Fe_") >
            < 1, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo(class Foo &f){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("this::Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb___Rb__Foo__Re___Fe_"), local > }
    LOCATION = { < SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb___Rb__Foo__Re___Fe_"), not local > }

PROCEDURE = { < ProcHandle("Foo::~Foo"), SymHandle("method:Foo::~Foo__Foo__scope____dtFoo____MFb_Foo__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Foo::~Foo__Foo__scope____dtFoo____MFb_Foo__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline ~Foo(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::Foo::~Foo__Foo__scope____dtFoo____MFb_Foo__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:Foo::~Foo__Foo__scope____dtFoo____MFb_Foo__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("Foo::operator="), SymHandle("method:Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_") >
            < 1, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo &operator=(class Foo &f){return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return *(this);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return *(this);") =>
        [
            MemRefHandle("(this)") => 
                NamedRef( USE, SymHandle("this::Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_"), F, full)
            MemRefHandle("*(this)") => 
                NamedRef( USE, SymHandle("this::Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_"), F, full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("return *(this);") =>
        [
            < NamedRef( DEF, SymHandle("method:Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_"), F, full)
            , NamedRef( USE, SymHandle("this::Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_"), F, full) >
        ] }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("this::Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_"), local > }
    LOCATION = { < SymHandle("method:Foo::operator=__Foo__scope__operator__as____MFb_Foo__Fb___Rb__Foo__Re___Gb___Rb__Foo__Re___Fe_"), not local > }

PROCEDURE = { < ProcHandle("Foo::virtMethod1"), SymHandle("method:Foo::virtMethod1__Foo__scope__virtMethod1____MFb_Foo__Fb_v_Gb__Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Foo::virtMethod1__Foo__scope__virtMethod1____MFb_Foo__Fb_v_Gb__Fe_") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: virtual inline void virtMethod1(){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("this::Foo::virtMethod1__Foo__scope__virtMethod1____MFb_Foo__Fb_v_Gb__Fe_"), local > }
    LOCATION = { < SymHandle("method:Foo::virtMethod1__Foo__scope__virtMethod1____MFb_Foo__Fb_v_Gb__Fe_"), not local > }

PROCEDURE = { < ProcHandle("Foo::virtMethod2"), SymHandle("method:Foo::virtMethod2__Foo__scope__virtMethod2____MFb_Foo__Fb_v_Gb_i_Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::Foo::virtMethod2__Foo__scope__virtMethod2____MFb_Foo__Fb_v_Gb_i_Fe_") >
            < 1, SymHandle("x") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: virtual inline void virtMethod2(int x){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("this::Foo::virtMethod2__Foo__scope__virtMethod2____MFb_Foo__Fb_v_Gb_i_Fe_"), local > }
    LOCATION = { < SymHandle("method:Foo::virtMethod2__Foo__scope__virtMethod2____MFb_Foo__Fb_v_Gb_i_Fe_"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("class Base {public: inline Base(){}inline Base(class Base &b){}inline ~Base(){}inline Base &operator=(class Base &b){return *(this);}virtual inline void virtMethodBase(){}virtual inline void virtMethod2(int x){}};") =>
        [
        ] }
    PTRASSIGNPAIRS = { StmtHandle("class Base {public: inline Base(){}inline Base(class Base &b){}inline ~Base(){}inline Base &operator=(class Base &b){return *(this);}virtual inline void virtMethodBase(){}virtual inline void virtMethod2(int x){}};") =>
        [
            < FieldAccess( DEF, NamedRef( USE, SymHandle("SgClassDefinition:Base"), F, full), virtMethod2_void_int, F, full)
            , NamedRef( USE, SymHandle("method:Base::virtMethod2__Base__scope__virtMethod2____MFb_Base__Fb_v_Gb_i_Fe_"), T, full) >
            < FieldAccess( DEF, NamedRef( USE, SymHandle("SgClassDefinition:Base"), F, full), virtMethodBase_void, F, full)
            , NamedRef( USE, SymHandle("method:Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_"), T, full) >
        ] }
    MEMREFEXPRS = { StmtHandle("class Foo : public Base{public: inline Foo(){}inline Foo(class Foo &f){}inline ~Foo(){}inline Foo &operator=(class Foo &f){return *(this);}virtual inline void virtMethod1(){}virtual inline void virtMethod2(int x){}};") =>
        [
        ] }
    PTRASSIGNPAIRS = { StmtHandle("class Foo : public Base{public: inline Foo(){}inline Foo(class Foo &f){}inline ~Foo(){}inline Foo &operator=(class Foo &f){return *(this);}virtual inline void virtMethod1(){}virtual inline void virtMethod2(int x){}};") =>
        [
            < FieldAccess( DEF, NamedRef( USE, SymHandle("SgClassDefinition:Foo"), F, full), virtMethod1_void, F, full)
            , NamedRef( USE, SymHandle("method:Foo::virtMethod1__Foo__scope__virtMethod1____MFb_Foo__Fb_v_Gb__Fe_"), T, full) >
            < FieldAccess( DEF, NamedRef( USE, SymHandle("SgClassDefinition:Foo"), F, full), virtMethod2_void_int, F, full)
            , NamedRef( USE, SymHandle("method:Foo::virtMethod2__Foo__scope__virtMethod2____MFb_Foo__Fb_v_Gb_i_Fe_"), T, full) >
            < FieldAccess( DEF, NamedRef( USE, SymHandle("SgClassDefinition:Foo"), F, full), virtMethodBase_void, F, full)
            , NamedRef( USE, SymHandle("method:Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_"), T, full) >
            < FieldAccess( DEF, NamedRef( USE, SymHandle("SgClassDefinition:Foo"), F, full), ~Foo_void, F, full)
            , NamedRef( USE, SymHandle("method:Foo::~Foo__Foo__scope____dtFoo____MFb_Foo__Fb_v_Gb__Fe_"), T, full) >
        ] }
    MEMREFEXPRS = { StmtHandle("int main(){class Base *f =(new Foo );int x;f -> virtMethod2(x);return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{class Base *f =(new Foo );int x;f -> virtMethod2(x);return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("class Base *f =(new Foo );") =>
        [
            MemRefHandle("f") => 
                NamedRef( DEF, SymHandle("f"), F, full)
            MemRefHandle("implicit actual this:") => 
                UnnamedRef( USE, StmtHandle("(new Foo )"), T, part)
            MemRefHandle("Foo") => 
                NamedRef( USE, SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), F, full)
            MemRefHandle("(new Foo )") => 
                UnnamedRef( USE, StmtHandle("(new Foo )"), T, part)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("class Base *f =(new Foo );") =>
        [
            < NamedRef( DEF, SymHandle("f"), F, full)
            , UnnamedRef( USE, StmtHandle("(new Foo )"), T, part) >
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("f"), F, full), 1, F, full), __oa_vtable_ptr, F, full)
            , NamedRef( USE, SymHandle("SgClassDefinition:Foo"), T, full) >
        ] }
    CALLSITES = { StmtHandle("class Base *f =(new Foo );") =>
        [
            CallHandle("(new Foo )") => 
                NamedRef( USE, SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), F, full)
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("(new Foo )") =>
        [
            < 0, UnnamedRef( USE, StmtHandle("(new Foo )"), T, part) >
        ] }
    MEMREFEXPRS = { StmtHandle("int x;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("f -> virtMethod2(x);") =>
        [
            MemRefHandle("f") => 
                NamedRef( USE, SymHandle("f"), F, full)
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"), F, full)
            MemRefHandle("f -> virtMethod2") => 
                FieldAccess( USE, Deref( USE, FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f"), F, full), 1, F, full), __oa_vtable_ptr, F, full), 1, F, full), virtMethod2_void_int, F, full)
        ] }
    CALLSITES = { StmtHandle("f -> virtMethod2(x);") =>
        [
            CallHandle("f -> virtMethod2(x)") => 
                Deref( USE, FieldAccess( USE, Deref( USE, FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("f"), F, full), 1, F, full), __oa_vtable_ptr, F, full), 1, F, full), virtMethod2_void_int, F, full), 1, F, full)
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("f -> virtMethod2(x)") =>
        [
            < 0, NamedRef( USE, SymHandle("f"), F, full) >
        ] }
    MEMREFEXPRS = { StmtHandle("return 0;") =>
        [
        ] }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("SgClassDefinition:Base"), not local > }
    LOCATION = { < SymHandle("SgClassDefinition:Foo"), not local > }
    LOCATION = { < SymHandle("main"), not local > }
    LOCATION = { < SymHandle("method:Base::virtMethodBase__Base__scope__virtMethodBase____MFb_Base__Fb_v_Gb__Fe_"), not local > }
    LOCATION = { < SymHandle("method:Base::virtMethod2__Base__scope__virtMethod2____MFb_Base__Fb_v_Gb_i_Fe_"), not local > }
    LOCATION = { < SymHandle("method:Foo::Foo__Foo__scope__Foo____MFb_Foo__Fb_v_Gb__Fe_"), not local > }
    LOCATION = { < SymHandle("method:Foo::~Foo__Foo__scope____dtFoo____MFb_Foo__Fb_v_Gb__Fe_"), not local > }
    LOCATION = { < SymHandle("method:Foo::virtMethod1__Foo__scope__virtMethod1____MFb_Foo__Fb_v_Gb__Fe_"), not local > }
    LOCATION = { < SymHandle("method:Foo::virtMethod2__Foo__scope__virtMethod2____MFb_Foo__Fb_v_Gb_i_Fe_"), not local > }
