
PROCEDURE = { < ProcHandle("SubClass::SubClass"), SymHandle("method:SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_") >
            < 1, SymHandle("parSubClass") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("myParent&") => 
                Deref( DEF, NamedRef( USE, SymHandle("this::SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), F, full), 1, F, part)
            MemRefHandle("parSubClass") => 
                NamedRef( USE, SymHandle("parSubClass"), F, full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("") =>
        [
            < Deref( DEF, NamedRef( USE, SymHandle("this::SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), F, full), 1, F, part)
            , NamedRef( USE, SymHandle("parSubClass"), F, full) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline SubClass(class Base &parSubClass) : myParent(parSubClass){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("parSubClass"), local > }
    LOCATION = { < SymHandle("this::SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), local > }
    LOCATION = { < SymHandle("method:SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), not local > }

PROCEDURE = { < ProcHandle("SubSubClass::SubSubClass"), SymHandle("method:SubSubClass::SubSubClass__SubSubClass__scope__SubSubClass____MFb_SubSubClass__Fb_v_Gb___Rb__Base__Re____sep____Rb__i__Re___Fe_") > }
    FORMALS = {
        [
            < 0, SymHandle("this::SubSubClass::SubSubClass__SubSubClass__scope__SubSubClass____MFb_SubSubClass__Fb_v_Gb___Rb__Base__Re____sep____Rb__i__Re___Fe_") >
            < 1, SymHandle("par") >
            < 2, SymHandle("aint") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("SubClass") => 
                NamedRef( USE, SymHandle("this::SubSubClass::SubSubClass__SubSubClass__scope__SubSubClass____MFb_SubSubClass__Fb_v_Gb___Rb__Base__Re____sep____Rb__i__Re___Fe_"), F, full)
            MemRefHandle("par") => 
                NamedRef( USE, SymHandle("par"), F, full)
            MemRefHandle("SubClass(par)") => 
                NamedRef( USE, SymHandle("method:SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), F, full)
        ] }
    CALLSITES = { StmtHandle("") =>
        [
            CallHandle("SubClass") => 
                NamedRef( USE, SymHandle("method:SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), F, full)
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("SubClass") =>
        [
            < 0, NamedRef( USE, SymHandle("this::SubSubClass::SubSubClass__SubSubClass__scope__SubSubClass____MFb_SubSubClass__Fb_v_Gb___Rb__Base__Re____sep____Rb__i__Re___Fe_"), T, full) >
            < 1, NamedRef( USE, SymHandle("par"), F, full) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline SubSubClass(class Base &par,int &aint) : SubClass(par){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("par"), local > }
    LOCATION = { < SymHandle("aint"), local > }
    LOCATION = { < SymHandle("this::SubSubClass::SubSubClass__SubSubClass__scope__SubSubClass____MFb_SubSubClass__Fb_v_Gb___Rb__Base__Re____sep____Rb__i__Re___Fe_"), local > }
    LOCATION = { < SymHandle("method:SubClass::SubClass__SubClass__scope__SubClass____MFb_SubClass__Fb_v_Gb___Rb__Base__Re___Fe_"), not local > }
    LOCATION = { < SymHandle("method:SubSubClass::SubSubClass__SubSubClass__scope__SubSubClass____MFb_SubSubClass__Fb_v_Gb___Rb__Base__Re____sep____Rb__i__Re___Fe_"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("int main(){return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return 0;") =>
        [
        ] }
    LOCATION = { < SymHandle("main"), not local > }
