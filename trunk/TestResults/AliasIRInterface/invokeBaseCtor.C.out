
PROCEDURE = { < ProcHandle("::SubClass::SubClass"), SymHandle("method:::SubClass::SubClass__L0R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::SubClass::SubClass__L0R") >
            < 1, SymHandle("parSubClass") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("myParent&") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::SubClass::SubClass__L0R")), 1), myParent)
            MemRefHandle("parSubClass") => 
                NamedRef( USE, SymHandle("parSubClass"))
            MemRefHandle("assign_or_agg_initializer:parSubClass") => 
                NamedRef( USE, SymHandle("this::::SubClass::SubClass__L0R"))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("this::::SubClass::SubClass__L0R")), 1), myParent)
            , NamedRef( USE, SymHandle("parSubClass")) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline SubClass::SubClass(class Base &parSubClass) : myParent(parSubClass){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("parSubClass"), local > }
    LOCATION = { < SymHandle("this::::SubClass::SubClass__L0R"), local > }
    LOCATION = { < SymHandle("method:::SubClass::SubClass__L0R"), not local > }

PROCEDURE = { < ProcHandle("::Foo::Foo"), SymHandle("method:::Foo::Foo__L1R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::Foo::Foo__L1R") >
            < 1, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline Foo::Foo(class Foo &f){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("this::::Foo::Foo__L1R"), local > }
    LOCATION = { < SymHandle("method:::Foo::Foo__L1R"), not local > }

PROCEDURE = { < ProcHandle("::SubSubClass::SubSubClass"), SymHandle("method:::SubSubClass::SubSubClass__L2R") > }
    FORMALS = {
        [
            < 0, SymHandle("this::::SubSubClass::SubSubClass__L2R") >
            < 1, SymHandle("par") >
            < 2, SymHandle("aint") >
            < 3, SymHandle("f") >
        ] }
    MEMREFEXPRS = { StmtHandle("") =>
        [
            MemRefHandle("::SubClass(par)") => 
                NamedRef( USE, SymHandle("method:::SubClass::SubClass__L0R"))
            MemRefHandle("::Foo(f)") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L1R"))
            MemRefHandle("par") => 
                NamedRef( USE, SymHandle("par"))
            MemRefHandle("f") => 
                NamedRef( USE, SymHandle("f"))
            MemRefHandle("implicit actual this:par") => 
                NamedRef( USE, SymHandle("this::::SubSubClass::SubSubClass__L2R"))
            MemRefHandle("implicit actual this:f") => 
                AddressOf( USE, FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("this::::SubSubClass::SubSubClass__L2R")), 1), mF))
        ] }
    CALLSITES = { StmtHandle("") =>
        [
            CallHandle("SubClass") => 
                NamedRef( USE, SymHandle("method:::SubClass::SubClass__L0R"))
            CallHandle("mF") => 
                NamedRef( USE, SymHandle("method:::Foo::Foo__L1R"))
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("SubClass") =>
        [
            < 0, NamedRef( USE, SymHandle("this::::SubSubClass::SubSubClass__L2R")) >
            < 1, NamedRef( USE, SymHandle("par")) >
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("mF") =>
        [
            < 0, AddressOf( USE, FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("this::::SubSubClass::SubSubClass__L2R")), 1), mF)) >
            < 1, NamedRef( USE, SymHandle("f")) >
        ] }
    MEMREFEXPRS = { StmtHandle("public: inline SubSubClass::SubSubClass(class Base &par,int &aint,class Foo &f) : SubClass(par), mF(f){}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{}") =>
        [
        ] }
    LOCATION = { < SymHandle("par"), local > }
    LOCATION = { < SymHandle("aint"), local > }
    LOCATION = { < SymHandle("f"), local > }
    LOCATION = { < SymHandle("this::::SubSubClass::SubSubClass__L2R"), local > }
    LOCATION = { < SymHandle("method:::SubClass::SubClass__L0R"), not local > }
    LOCATION = { < SymHandle("method:::Foo::Foo__L1R"), not local > }
    LOCATION = { < SymHandle("method:::SubSubClass::SubSubClass__L2R"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("class ::Base {};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("class ::SubClass : public Base{public: inline SubClass::SubClass(class Base &parSubClass) : myParent(parSubClass){}class ::Base &myParent;};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("class ::Foo {public: inline Foo::Foo(class Foo &f){}};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("class ::SubSubClass : public SubClass{public: inline SubSubClass::SubSubClass(class Base &par,int &aint,class Foo &f) : SubClass(par), mF(f){}class ::Foo mF;};") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int main(){return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{return 0;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("return 0;") =>
        [
        ] }
    LOCATION = { < SymHandle("main"), not local > }
