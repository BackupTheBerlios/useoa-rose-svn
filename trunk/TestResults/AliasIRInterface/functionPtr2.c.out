
PROCEDURE = { < ProcHandle("foo"), SymHandle("foo") > }
    FORMALS = {
        [
            < 0, SymHandle("x") >
            < 1, SymHandle("y") >
        ] }
    MEMREFEXPRS = { StmtHandle("int foo(int **x,int **y){*x = *y;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{*x = *y;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("*x = *y;") =>
        [
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"))
            MemRefHandle("y") => 
                NamedRef( USE, SymHandle("y"))
            MemRefHandle("*x") => 
                Deref( DEF, NamedRef( USE, SymHandle("x")), 1)
            MemRefHandle("*y") => 
                Deref( USE, NamedRef( USE, SymHandle("y")), 1)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("*x = *y;") =>
        [
            < Deref( DEF, NamedRef( USE, SymHandle("x")), 1)
            , Deref( USE, NamedRef( USE, SymHandle("y")), 1) >
        ] }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("y"), local > }
    LOCATION = { < SymHandle("foo"), not local > }

PROCEDURE = { < ProcHandle("bar"), SymHandle("bar") > }
    FORMALS = {
        [
            < 0, SymHandle("xx") >
            < 1, SymHandle("yy") >
        ] }
    MEMREFEXPRS = { StmtHandle("int bar(int **xx,int **yy){*yy = *xx;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{*yy = *xx;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("*yy = *xx;") =>
        [
            MemRefHandle("yy") => 
                NamedRef( USE, SymHandle("yy"))
            MemRefHandle("xx") => 
                NamedRef( USE, SymHandle("xx"))
            MemRefHandle("*yy") => 
                Deref( DEF, NamedRef( USE, SymHandle("yy")), 1)
            MemRefHandle("*xx") => 
                Deref( USE, NamedRef( USE, SymHandle("xx")), 1)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("*yy = *xx;") =>
        [
            < Deref( DEF, NamedRef( USE, SymHandle("yy")), 1)
            , Deref( USE, NamedRef( USE, SymHandle("xx")), 1) >
        ] }
    LOCATION = { < SymHandle("xx"), local > }
    LOCATION = { < SymHandle("yy"), local > }
    LOCATION = { < SymHandle("bar"), not local > }

PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("void main(){int input = read();int a;int b;int *p = &a;int *q = &b;int(*fp)(int **, int **);if(input) {fp = ::foo;}else {fp = ::bar;}( *fp)(&p,&q);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{int input = read();int a;int b;int *p = &a;int *q = &b;int(*fp)(int **, int **);if(input) {fp = ::foo;}else {fp = ::bar;}( *fp)(&p,&q);}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int input = read();") =>
        [
            MemRefHandle("input") => 
                NamedRef( DEF, SymHandle("input"))
            MemRefHandle("read") => 
                NamedRef( USE, SymHandle("read"))
        ] }
    CALLSITES = { StmtHandle("int input = read();") =>
        [
            CallHandle("read()") => 
                NamedRef( USE, SymHandle("read"))
        ] }
    MEMREFEXPRS = { StmtHandle("int a;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int b;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int *p = &a;") =>
        [
            MemRefHandle("p") => 
                NamedRef( DEF, SymHandle("p"))
            MemRefHandle("&a") => 
                AddressOf( USE, NamedRef( USE, SymHandle("a")))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("int *p = &a;") =>
        [
            < NamedRef( DEF, SymHandle("p"))
            , AddressOf( USE, NamedRef( USE, SymHandle("a"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("int *q = &b;") =>
        [
            MemRefHandle("q") => 
                NamedRef( DEF, SymHandle("q"))
            MemRefHandle("&b") => 
                AddressOf( USE, NamedRef( USE, SymHandle("b")))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("int *q = &b;") =>
        [
            < NamedRef( DEF, SymHandle("q"))
            , AddressOf( USE, NamedRef( USE, SymHandle("b"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("int(*fp)(int **, int **);") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("if(input) {fp = ::foo;}else {fp = ::bar;}") =>
        [
            MemRefHandle("input") => 
                NamedRef( USE, SymHandle("input"))
        ] }
    MEMREFEXPRS = { StmtHandle("{fp = ::foo;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("fp = ::foo;") =>
        [
            MemRefHandle("fp") => 
                NamedRef( DEF, SymHandle("fp"))
            MemRefHandle("::foo") => 
                AddressOf( USE, NamedRef( USE, SymHandle("foo")))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("fp = ::foo;") =>
        [
            < NamedRef( DEF, SymHandle("fp"))
            , AddressOf( USE, NamedRef( USE, SymHandle("foo"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("{fp = ::bar;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("fp = ::bar;") =>
        [
            MemRefHandle("fp") => 
                NamedRef( DEF, SymHandle("fp"))
            MemRefHandle("::bar") => 
                AddressOf( USE, NamedRef( USE, SymHandle("bar")))
        ] }
    PTRASSIGNPAIRS = { StmtHandle("fp = ::bar;") =>
        [
            < NamedRef( DEF, SymHandle("fp"))
            , AddressOf( USE, NamedRef( USE, SymHandle("bar"))) >
        ] }
    MEMREFEXPRS = { StmtHandle("( *fp)(&p,&q);") =>
        [
            MemRefHandle("fp") => 
                NamedRef( USE, SymHandle("fp"))
            MemRefHandle("( *fp)") => 
                Deref( USE, NamedRef( USE, SymHandle("fp")), 1)
            MemRefHandle("&p") => 
                AddressOf( USE, NamedRef( USE, SymHandle("p")))
            MemRefHandle("&q") => 
                AddressOf( USE, NamedRef( USE, SymHandle("q")))
        ] }
    CALLSITES = { StmtHandle("( *fp)(&p,&q);") =>
        [
            CallHandle("( *fp)(&p,&q)") => 
                Deref( USE, NamedRef( USE, SymHandle("fp")), 1)
        ] }
    PARAMBINDPTRASSIGNPAIRS = { CallHandle("( *fp)(&p,&q)") =>
        [
            < 0, AddressOf( USE, NamedRef( USE, SymHandle("p"))) >
            < 1, AddressOf( USE, NamedRef( USE, SymHandle("q"))) >
        ] }
    LOCATION = { < SymHandle("input"), local > }
    LOCATION = { < SymHandle("a"), local > }
    LOCATION = { < SymHandle("b"), local > }
    LOCATION = { < SymHandle("p"), local > }
    LOCATION = { < SymHandle("q"), local > }
    LOCATION = { < SymHandle("fp"), local > }
    LOCATION = { < SymHandle("read"), not local > }
    LOCATION = { < SymHandle("foo"), not local > }
    LOCATION = { < SymHandle("bar"), not local > }
    LOCATION = { < SymHandle("main"), not local > }
