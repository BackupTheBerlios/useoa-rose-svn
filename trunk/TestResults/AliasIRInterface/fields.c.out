
PROCEDURE = { < ProcHandle("main"), SymHandle("main") > }
    MEMREFEXPRS = { StmtHandle("void main(){int n;struct test {int a;int b;int *p;}*x;struct test y;struct test **z;x = &y;z = &x;( *( *z)).p = &n;x -> p =(y.p);x -> p = &n;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("{int n;struct test {int a;int b;int *p;}*x;struct test y;struct test **z;x = &y;z = &x;( *( *z)).p = &n;x -> p =(y.p);x -> p = &n;}") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("int n;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("struct test {int a;int b;int *p;}*x;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("struct test y;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("struct test **z;") =>
        [
        ] }
    MEMREFEXPRS = { StmtHandle("x = &y;") =>
        [
            MemRefHandle("x") => 
                NamedRef( DEF, SymHandle("x"), full)
            MemRefHandle("&y") => 
                AddressOf( USE, NamedRef( USE, SymHandle("y"), full), full)
            MemRefHandle("x = &y") => 
                NamedRef( USE, SymHandle("x"), full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("x = &y;") =>
        [
            < NamedRef( DEF, SymHandle("x"), full)
            , AddressOf( USE, NamedRef( USE, SymHandle("y"), full), full) >
        ] }
    MEMREFEXPRS = { StmtHandle("z = &x;") =>
        [
            MemRefHandle("z") => 
                NamedRef( DEF, SymHandle("z"), full)
            MemRefHandle("&x") => 
                AddressOf( USE, NamedRef( USE, SymHandle("x"), full), full)
            MemRefHandle("z = &x") => 
                NamedRef( USE, SymHandle("z"), full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("z = &x;") =>
        [
            < NamedRef( DEF, SymHandle("z"), full)
            , AddressOf( USE, NamedRef( USE, SymHandle("x"), full), full) >
        ] }
    MEMREFEXPRS = { StmtHandle("( *( *z)).p = &n;") =>
        [
            MemRefHandle("z") => 
                NamedRef( USE, SymHandle("z"), full)
            MemRefHandle("&n") => 
                AddressOf( USE, NamedRef( USE, SymHandle("n"), full), full)
            MemRefHandle("( *( *z)).p = &n") => 
                FieldAccess( USE, Deref( USE, Deref( USE, NamedRef( USE, SymHandle("z"), full), 1, full), 1, full), p, full)
            MemRefHandle("( *z)") => 
                Deref( USE, NamedRef( USE, SymHandle("z"), full), 1, full)
            MemRefHandle("( *( *z)).p") => 
                FieldAccess( DEF, Deref( USE, Deref( USE, NamedRef( USE, SymHandle("z"), full), 1, full), 1, full), p, full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("( *( *z)).p = &n;") =>
        [
            < FieldAccess( DEF, Deref( USE, Deref( USE, NamedRef( USE, SymHandle("z"), full), 1, full), 1, full), p, full)
            , AddressOf( USE, NamedRef( USE, SymHandle("n"), full), full) >
        ] }
    MEMREFEXPRS = { StmtHandle("x -> p =(y.p);") =>
        [
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"), full)
            MemRefHandle("x -> p =(y.p)") => 
                FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("x"), full), 1, full), p, full)
            MemRefHandle("(y.p)") => 
                FieldAccess( USE, NamedRef( USE, SymHandle("y"), full), p, full)
            MemRefHandle("x -> p") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("x"), full), 1, full), p, full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("x -> p =(y.p);") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("x"), full), 1, full), p, full)
            , FieldAccess( USE, NamedRef( USE, SymHandle("y"), full), p, full) >
        ] }
    MEMREFEXPRS = { StmtHandle("x -> p = &n;") =>
        [
            MemRefHandle("x") => 
                NamedRef( USE, SymHandle("x"), full)
            MemRefHandle("&n") => 
                AddressOf( USE, NamedRef( USE, SymHandle("n"), full), full)
            MemRefHandle("x -> p = &n") => 
                FieldAccess( USE, Deref( USE, NamedRef( USE, SymHandle("x"), full), 1, full), p, full)
            MemRefHandle("x -> p") => 
                FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("x"), full), 1, full), p, full)
        ] }
    PTRASSIGNPAIRS = { StmtHandle("x -> p = &n;") =>
        [
            < FieldAccess( DEF, Deref( USE, NamedRef( USE, SymHandle("x"), full), 1, full), p, full)
            , AddressOf( USE, NamedRef( USE, SymHandle("n"), full), full) >
        ] }
    LOCATION = { < SymHandle("n"), local > }
    LOCATION = { < SymHandle("x"), local > }
    LOCATION = { < SymHandle("y"), local > }
    LOCATION = { < SymHandle("z"), local > }
    LOCATION = { < SymHandle("main"), not local > }
