
InterAliasMap(
    AliasMap(
        mProcHandle: ProcHandle(gnu_dev_major)
        mNumSets: 12
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(__dev)
                        mLocal: 1
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                10	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                11	 => [ 
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: USE
                            mMRE: 
                            NamedRef(
                                mMemRefType: DEF
                                mSymHandle: SymHandle(my_malloc)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(s)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(t)
                            )
                            mNumDeref: 1
                        )
                    )    
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 2
                11	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                5	 => [ MemRefHandle(__dev)    MemRefHandle(__dev) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(__dev)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                9	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                10	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                11	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(gnu_dev_minor)
        mNumSets: 12
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(__dev)
                        mLocal: 1
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                10	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                11	 => [ 
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: USE
                            mMRE: 
                            NamedRef(
                                mMemRefType: DEF
                                mSymHandle: SymHandle(my_malloc)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(s)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(t)
                            )
                            mNumDeref: 1
                        )
                    )    
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 2
                11	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                5	 => [ MemRefHandle(__dev)    MemRefHandle(__dev) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(__dev)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                9	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                10	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                11	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(gnu_dev_makedev)
        mNumSets: 13
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(__major)
                        mLocal: 1
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(__minor)
                        mLocal: 1
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                10	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                11	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                12	 => [ 
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: USE
                            mMRE: 
                            NamedRef(
                                mMemRefType: DEF
                                mSymHandle: SymHandle(my_malloc)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(s)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(t)
                            )
                            mNumDeref: 1
                        )
                    )    
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 2
                11	 => 2
                12	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                5	 => [ MemRefHandle(__major)    MemRefHandle(__major) ] 
                6	 => [ MemRefHandle(__minor)    MemRefHandle(__minor) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(__major)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(__minor)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                9	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                10	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                11	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                12	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(my_malloc)
        mNumSets: 13
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(size)
                        mLocal: 1
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                10	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(p)
                        mLocal: 1
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                11	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                12	 => [ 
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 2
                11	 => 2
                12	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                1	 => [ MemRefHandle(malloc) ] 
                9	 => [ MemRefHandle(size) ] 
                10	 => [ MemRefHandle(p)    MemRefHandle(p) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                9	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(size)
                    ) ] 
                10	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(p)
                    ) ] 
                11	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                12	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(p)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(a)
        mNumSets: 11
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                10	 => [ 
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: USE
                            mMRE: 
                            NamedRef(
                                mMemRefType: DEF
                                mSymHandle: SymHandle(my_malloc)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(s)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(t)
                            )
                            mNumDeref: 1
                        )
                    )    
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                2	 => [ MemRefHandle(my_malloc)    MemRefHandle((my_malloc(((sizeof(struct S )))))) ] 
                5	 => [ MemRefHandle(x) ] 
                6	 => [ MemRefHandle(s)    MemRefHandle(s) ] 
                10	 => [ MemRefHandle(*s) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                9	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                10	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(b)
        mNumSets: 11
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                10	 => [ 
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: USE
                            mMRE: 
                            NamedRef(
                                mMemRefType: DEF
                                mSymHandle: SymHandle(my_malloc)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(s)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(t)
                            )
                            mNumDeref: 1
                        )
                    )    
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                2	 => [ MemRefHandle(my_malloc)    MemRefHandle((my_malloc(((sizeof(struct T )))))) ] 
                7	 => [ MemRefHandle(y) ] 
                8	 => [ MemRefHandle(t)    MemRefHandle(t) ] 
                10	 => [ MemRefHandle(*t) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                9	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                10	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
    AliasMap(
        mProcHandle: ProcHandle(main)
        mNumSets: 11
        mStartId: 0
        mIdToLocSetMap: int	 => OA::OA_ptr<LocSet> 
                0	 => [ 
                    UnknownLoc(
                    ) ] 
                1	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                2	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(my_malloc)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                3	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(a)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                4	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(b)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                5	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(x)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                6	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(s)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                7	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(y)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                8	 => [ 
                    NamedLoc(
                        mSymHandle: SymHandle(t)
                        mLocal: 0
                        mFullOverlap: [  ] 
                        mPartOverlap: [  ] 
                    ) ] 
                9	 => [ 
                    UnnamedLoc(
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                10	 => [ 
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: USE
                            mMRE: 
                            NamedRef(
                                mMemRefType: DEF
                                mSymHandle: SymHandle(my_malloc)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(s)
                            )
                            mNumDeref: 1
                        )
                    )    
                    InvisibleLoc(
                        mMRE: 
                        Deref(
                            mMemRefType: DEF
                            mMRE: 
                            NamedRef(
                                mMemRefType: USE
                                mSymHandle: SymHandle(t)
                            )
                            mNumDeref: 1
                        )
                    )    
                    LocSubSet(
                        mLoc: 
                        UnnamedLoc(
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                        mFull: 0
                    ) ] 

        mIdToSetStatusMap: int	 => AliasResultType
                0	 => 1
                1	 => 2
                2	 => 2
                3	 => 2
                4	 => 2
                5	 => 2
                6	 => 2
                7	 => 2
                8	 => 2
                9	 => 2
                10	 => 1

        mIdToMemRefSetMap: int	 => MemRefSet
                3	 => [ MemRefHandle(a) ] 
                4	 => [ MemRefHandle(b) ] 

        mIdToMRESetMap: int	 => MemRefExprSet
                1	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(malloc)
                    ) ] 
                2	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(my_malloc)
                    ) ] 
                3	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(a)
                    ) ] 
                4	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(b)
                    ) ] 
                5	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(x)
                    ) ] 
                6	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(s)
                    ) ] 
                7	 => [ 
                    NamedRef(
                        mMemRefType: USE
                        mSymHandle: SymHandle(y)
                    ) ] 
                8	 => [ 
                    NamedRef(
                        mMemRefType: DEF
                        mSymHandle: SymHandle(t)
                    ) ] 
                9	 => [ 
                    UnnamedRef(
                        mMemRefType: USE
                        mExprHandle: ExprHandle((malloc((size))))
                        mLocal: 0
                    ) ] 
                10	 => [ 
                    Deref(
                        mMemRefType: USE
                        mMRE: 
                        NamedRef(
                            mMemRefType: DEF
                            mSymHandle: SymHandle(my_malloc)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(s)
                        )
                        mNumDeref: 1
                    )    
                    Deref(
                        mMemRefType: DEF
                        mMRE: 
                        NamedRef(
                            mMemRefType: USE
                            mSymHandle: SymHandle(t)
                        )
                        mNumDeref: 1
                    )    
                    SubSetRef(
                        mMemRefType: USE
                        mMRE: 
                        UnnamedRef(
                            mMemRefType: USE
                            mExprHandle: ExprHandle((malloc((size))))
                            mLocal: 0
                        )
                    ) ] 

    )
)
