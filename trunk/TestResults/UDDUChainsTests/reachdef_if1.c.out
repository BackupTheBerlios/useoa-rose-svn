
graph DGraph:

    Node 1: 
        ====== CFG node 1 ======


    Node 2: 
        ====== CFG node 2 ======
double x;
double y;
double z;
x =(2);
if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);}


    Node 3: 
        ====== CFG node 3 ======
y =(5);
x =(y + y);



    Node 4: 
        ====== CFG node 4 ======
y =(3);



    Node 5: 
        ====== CFG node 5 ======
z = y;
return 0;


    Node 6: 
        ====== CFG node 6 ======



    Node 7: 
        ====== CFG node 7 ======


    Edge: 1 => 2
        { 1 FALLTHROUGH_EDGE 0 }

    Edge: 2 => 3
        { 2 TRUE_EDGE 0 }

    Edge: 2 => 4
        { 3 FALSE_EDGE 0 }

    Edge: 3 => 5
        { 4 FALLTHROUGH_EDGE 0 }

    Edge: 4 => 5
        { 5 FALLTHROUGH_EDGE 0 }

    Edge: 6 => 7
        { 6 FALLTHROUGH_EDGE 0 }

    Edge: 5 => 7
        { 7 RETURN_EDGE 0 }


ReachDefsStandard(
    mReachDefs: StmtHandle	 => OA_ptr<std::set<StmtHandle> >
            StmtHandle(y =(5);)	 => [ StmtHandle(x =(2);) ] 
            StmtHandle(x =(y + y);)	 => [ StmtHandle(x =(2);)    StmtHandle(y =(5);) ] 
            StmtHandle(y =(3);)	 => [ StmtHandle(x =(2);) ] 
            StmtHandle(z = y;)	 => [ StmtHandle(x =(2);)    StmtHandle(y =(5);)    StmtHandle(x =(y + y);)    StmtHandle(y =(3);) ] 
            StmtHandle(if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);})	 => [ StmtHandle(x =(2);) ] 
            StmtHandle()	 => [ StmtHandle(y =(5);)    StmtHandle(x =(y + y);) ] 
            StmtHandle()	 => [ StmtHandle(x =(2);)    StmtHandle(y =(3);) ] 
            StmtHandle(return 0;)	 => [ StmtHandle(x =(2);)    StmtHandle(y =(5);)    StmtHandle(x =(y + y);)    StmtHandle(y =(3);)    StmtHandle(z = y;) ] 

    mExitReachDefs: [ StmtHandle(x =(2);)    StmtHandle(y =(5);)    StmtHandle(x =(y + y);)    StmtHandle(y =(3);)    StmtHandle(z = y;) ] 
)
============= UDDUChains ============
Use StmtHandle(139311404) x =(y + y);
	Define Statements: 
	y =(5);
Use StmtHandle(139311476) z = y;
	Define Statements: 
	y =(5);
	y =(3);
Use StmtHandle(139399456) if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);}
	Define Statements: 
	x =(2);
Def StmtHandle(139311296) x =(2);
	Use Statements: 
	if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);}
Def StmtHandle(139311368) y =(5);
	Use Statements: 
	x =(y + y);
	z = y;
Def StmtHandle(139311440) y =(3);
	Use Statements: 
	z = y;
Use MemRefHandle(139103116) x
	Define Statements: 
	x =(2);
Use MemRefHandle(139103248) y
	Define Statements: 
	y =(5);
Use MemRefHandle(139103292) y
	Define Statements: 
	y =(5);
Use MemRefHandle(139103424) y
	Define Statements: 
	y =(5);
	y =(3);
Def MemRefHandle(139103072) x
	Use Statements: 
	if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);}
Def MemRefHandle(139103160) y
	Use Statements: 
	x =(y + y);
	z = y;
Def MemRefHandle(139103204) x
	Use Statements: 
Def MemRefHandle(139103336) y
	Use Statements: 
	z = y;
Def MemRefHandle(139103380) z
	Use Statements: 

UDDUChainsStandard(
    mUDChainForStmt: StmtHandle	 => OA::OA_ptr<StmtSet> 
            
            Use StatementHandle : StmtHandle(x =(y + y);)	 => 
            Define Statements: [ StmtHandle(y =(5);) ] 
            
            Use StatementHandle : StmtHandle(z = y;)	 => 
            Define Statements: [ StmtHandle(y =(5);)    StmtHandle(y =(3);) ] 
            
            Use StatementHandle : StmtHandle(if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);})	 => 
            Define Statements: [ StmtHandle(x =(2);) ] 

    mDUChainForStmt: StmtHandle	 => OA::OA_ptr<StmtSet> 
            
            Def StmtHandle: StmtHandle(x =(2);)	 => 
            Use Statements: [ StmtHandle(if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);}) ] 
            
            Def StmtHandle: StmtHandle(y =(5);)	 => 
            Use Statements: [ StmtHandle(x =(y + y);)    StmtHandle(z = y;) ] 
            
            Def StmtHandle: StmtHandle(y =(3);)	 => 
            Use Statements: [ StmtHandle(z = y;) ] 

    mUDChainForMemRef: MemRefHandle	 => OA::OA_ptr<StmtSet> 
            
            Use MemRefHandle: MemRefHandle(x)	 => 
            Def Statements: [ StmtHandle(x =(2);) ] 
            
            Use MemRefHandle: MemRefHandle(y)	 => 
            Def Statements: [ StmtHandle(y =(5);) ] 
            
            Use MemRefHandle: MemRefHandle(y)	 => 
            Def Statements: [ StmtHandle(y =(5);) ] 
            
            Use MemRefHandle: MemRefHandle(y)	 => 
            Def Statements: [ StmtHandle(y =(5);)    StmtHandle(y =(3);) ] 

    mDUChainForMemRef: MemRefHandle	 => OA::OA_ptr<StmtSet> 
            
            Def MemRefHandle: MemRefHandle(x)	 => 
            Use Statements: [ StmtHandle(if(x >=(0)) {y =(5);x =(y + y);}else {y =(3);}) ] 
            
            Def MemRefHandle: MemRefHandle(y)	 => 
            Use Statements: [ StmtHandle(x =(y + y);)    StmtHandle(z = y;) ] 
            
            Def MemRefHandle: MemRefHandle(x)	 => 
            Use Statements: [  ] 
            
            Def MemRefHandle: MemRefHandle(y)	 => 
            Use Statements: [ StmtHandle(z = y;) ] 
            
            Def MemRefHandle: MemRefHandle(z)	 => 
            Use Statements: [  ] 

    mMemRefToStmtMap: MemRefHandle	 => StmtHandle
