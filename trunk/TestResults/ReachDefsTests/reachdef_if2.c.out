
graph DGraph:

    Node 1: 
        ====== CFG node 1 ======


    Node 2: 
        ====== CFG node 2 ======
double x;
double y;
double z;
x =(2);
if(x >=(0)) {y =(5);x =(y + y);y =(x *(5));}else {y =(3);}


    Node 3: 
        ====== CFG node 3 ======
y =(5);
x =(y + y);
y =(x *(5));


    Node 4: 
        ====== CFG node 4 ======
y =(3);


    Node 5: 
        ====== CFG node 5 ======
z = y;
return 0;


    Node 6: 
        ====== CFG node 6 ======


    Edge: 1 => 2
        { FALLTHROUGH_EDGE 0 }

    Edge: 2 => 3
        { TRUE_EDGE 0 }

    Edge: 2 => 4
        { FALSE_EDGE 0 }

    Edge: 3 => 5
        { FALLTHROUGH_EDGE 0 }

    Edge: 4 => 5
        { FALLTHROUGH_EDGE 0 }

    Edge: 5 => 6
        { RETURN_EDGE 0 }


ReachDefsStandard(
    mReachDefs: StmtHandle	 => OA_ptr<std::set<StmtHandle> >
            StmtHandle(y =(5);)	 => [ StmtHandle(x =(2);) ] 
            StmtHandle(x =(y + y);)	 => [ StmtHandle(x =(2);)    StmtHandle(y =(5);) ] 
            StmtHandle(y =(x *(5));)	 => [ StmtHandle(y =(5);)    StmtHandle(x =(y + y);) ] 
            StmtHandle(y =(3);)	 => [ StmtHandle(x =(2);) ] 
            StmtHandle(z = y;)	 => [ StmtHandle(x =(2);)    StmtHandle(x =(y + y);)    StmtHandle(y =(x *(5));)    StmtHandle(y =(3);) ] 
            StmtHandle(if(x >=(0)) {y =(5);x =(y + y);y =(x *(5));}else {y =(3);})	 => [ StmtHandle(x =(2);) ] 
            StmtHandle(return 0;)	 => [ StmtHandle(x =(2);)    StmtHandle(x =(y + y);)    StmtHandle(y =(x *(5));)    StmtHandle(y =(3);)    StmtHandle(z = y;) ] 

    mExitReachDefs: [ StmtHandle(x =(2);)    StmtHandle(x =(y + y);)    StmtHandle(y =(x *(5));)    StmtHandle(y =(3);)    StmtHandle(z = y;) ] 
)

*******  end of DoReachDef *********

