
========================stmt============================

stmt = int main(){double a;double f;double t;double x;foo(a,f,x,t);return 0;}

========================stmt============================

stmt = {double a;double f;double t;double x;foo(a,f,x,t);return 0;}

========================stmt============================

stmt = double a;

========================stmt============================

stmt = double f;

========================stmt============================

stmt = double t;

========================stmt============================

stmt = double x;

========================stmt============================

stmt = foo(a,f,x,t);

	--expr----------------------------------------
	  expr = a
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( a )

	--expr----------------------------------------
	  expr = f
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( f )

	--expr----------------------------------------
	  expr = x
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( x )

	--expr----------------------------------------
	  expr = t
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( t )

========================stmt============================

stmt = return 0;

========================stmt============================

stmt = void foo(double a,double f,double x,double t){int i;a =(((a - f) + t) * x);}

========================stmt============================

stmt = {int i;a =(((a - f) + t) * x);}

========================stmt============================

stmt = int i;

========================stmt============================

stmt = a =(((a - f) + t) * x);

	--expr----------------------------------------
	  expr = (((a - f) + t) * x)
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET OpNode ( * )
    Edge: 
        0 => 
        Node 1: ET OpNode ( + )
        Edge: 
            1 => 
            Node 2: ET OpNode ( - )
            Edge: 
                2 => 
                Node 3: ET MemRefNode ( a )
            Edge: 
                2 => 
                Node 4: ET MemRefNode ( f )
        Edge: 
            1 => 
            Node 5: ET MemRefNode ( t )
    Edge: 
        0 => 
        Node 6: ET MemRefNode ( x )
