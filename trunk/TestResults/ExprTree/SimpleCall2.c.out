
========================stmt============================

stmt = int main(){double a;double f;double t;double x;foo(a,f,x,t);return 0;}

========================stmt============================

stmt = {double a;double f;double t;double x;foo(a,f,x,t);return 0;}

========================stmt============================

stmt = double a;

========================stmt============================

stmt = double f;

========================stmt============================

stmt = double t;

========================stmt============================

stmt = double x;

========================stmt============================

stmt = foo(a,f,x,t);

	--Call-----------------------------------------
	  Call: [foo(a,f,x,t)]
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( a )

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( f )

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( x )

graph EXPRESSION TREE:

    Node 0: ET MemRefNode ( t )

========================stmt============================

stmt = return 0;

========================stmt============================

stmt = void foo(double a,double f,double x,double t){int i;a =((a * x) + func((t - f)));}

========================stmt============================

stmt = {int i;a =((a * x) + func((t - f)));}

========================stmt============================

stmt = int i;

========================stmt============================

stmt = a =((a * x) + func((t - f)));

	--expr----------------------------------------
	  expr = ((a * x) + func((t - f)))
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET OpNode ( + )
    Edge: 
        0 => 
        Node 1: ET OpNode ( * )
        Edge: 
            1 => 
            Node 2: ET MemRefNode ( a )
        Edge: 
            1 => 
            Node 3: ET MemRefNode ( x )
    Edge: 
        0 => 
        Node 4: ET CallNode ( func((t - f)) )

	--Call-----------------------------------------
	  Call: [func((t - f))]
	----------------------------------------------
graph EXPRESSION TREE:

    Node 0: ET OpNode ( - )
    Edge: 
        0 => 
        Node 1: ET MemRefNode ( t )
    Edge: 
        0 => 
        Node 2: ET MemRefNode ( f )

========================stmt============================

stmt = double func(double n){return n;}

========================stmt============================

stmt = {return n;}

========================stmt============================

stmt = return n;
