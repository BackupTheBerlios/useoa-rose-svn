#include <stdio.h>
#include <time.h>
#include "List.h"
#include "Constraints.h"
#include "DeltaBlue.h"
#include "UsefulConstraints.h"

/***************************************************************************

    Private Prototypes

****************************************************************************/

long Milliseconds(void);
void Start(void);
void Finish(long*);
void SelfDBBenchmark(int, int);

/***************************************************************************

    Timing Functions

****************************************************************************/

static long startTime;

# define CLOCKS_PER_SEC 1000000

long Milliseconds()
{
    int millisecondsPerClock = CLOCKS_PER_SEC / 1000;
    return (clock() / millisecondsPerClock);
}

void Start()
{
    startTime = Milliseconds();
}

void Finish(long *milliseconds)
{
    *milliseconds = Milliseconds() - startTime;
}

/***************************************************************************
*
* This is a variation on the standard DeltaBlue chain benchmark
* that constructs a chain of length n as above but then repeatedly adds a
* constraint, extracts a plan, runs the plan, and removes the constraint
* a total of count times. This is meant to match the behavior of the Self
* DeltaBlue benchmark.
*
****************************************************************************/

void SelfDBBenchmark(int n, int count) {
    long 	msecs, i;
    Variable*	prev, *v, *first, *last;
    Constraint*	editC;
    List<Constraint*>*	plan;

    deltablue = new DeltaBlue;
    prev = first = last = NULL;

  Start();
    /* build a chain of n equality constraints terminated by a default stay */
    for (i = 0; i < n; i++) {
	v = new Variable("", 0, false);
	if (i == 0)	{ first = v; }
	else		{ new EqualsConstraint(prev, v, S_required); };

	if (i == (n-1)) { last = v; };
	prev = v;
    }
    new StayConstraint(last, S_default);

    /* repeatedly: add a constraint, make and run plan, and remove constraint */
    for (i = 0; i < count; i++) {
	editC = new EditConstraint(first, S_strongDefault);
	plan = deltablue->ExtractPlanFromConstraint(editC);
	ExecutePlan(plan);
	delete plan;
	deltablue->DestroyConstraint(editC);
    }
  Finish(&msecs);

    printf("Self-style DeltaBlue Benchmark (chain length: %d, count: %d, total time: %d)\n",
	   n, count, msecs);
    fflush(stdout);
}

extern "C" void exit(int);

# ifdef COUNT
  long nVarCreate = 0, nConstrCreate = 0, nSatisfy = 0,
       nAddPropagate = 0, nIncrementalAdd = 0, nIncrementalRemove = 0,
       nDownStream = 0;
# endif

main(int argc, char **argv) {
    int n, count;

    if (argc != 3) {
	printf("usage: %s <chain length> <iterations>\n", argv[0]);
	exit(-1);
    }
    sscanf(&*argv[1], "%d", &n);
    sscanf(&*argv[2], "%d", &count);
    SelfDBBenchmark(n, count);
#   ifdef COUNT
      printf("%ld variables, %ld constraints, mark = %ld, %ld satisfy calls\n",
	     nVarCreate, nConstrCreate, deltablue->mark(), nSatisfy);
      printf("%ld addPropagate, %ld incrementalAdd, %ld incrementalRemove calls\n",
	     nAddPropagate, nIncrementalAdd, nIncrementalRemove);
      printf("%ld nDownStream\n", nDownStream);
#   endif
    vprof_output_statistics("out");
    return 0;
}
